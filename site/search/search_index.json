{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"admin/","title":"Admin Module","text":""},{"location":"admin/#src.admin.Admin","title":"<code>Admin</code>","text":"<p>Represents an administrator with privileges to manage a conference.</p> <p>Attributes:</p> Name Type Description <code>username</code> <code>str</code> <p>The admin's username.</p> <code>password</code> <code>str</code> <p>The admin's password.</p> Source code in <code>src/admin.py</code> <pre><code>class Admin:\n    \"\"\"\n    Represents an administrator with privileges to manage a conference.\n\n    Attributes:\n        username (str): The admin's username.\n        password (str): The admin's password.\n    \"\"\"\n\n    def __init__(self, username: str, password: str):\n        \"\"\"\n        Initialize an Admin instance.\n\n        Args:\n            username (str): Admin username.\n            password (str): Admin password.\n        \"\"\"\n        self.username = username\n        self.password_hash = self._hash_password(password)\n\n    def _hash_password(self, password: str) -&gt; str:\n        \"\"\"\n        Returns a SHA-256 hash of the provided password.\n        \"\"\"\n        return sha256(password.encode()).hexdigest()\n\n    def authenticate(self, password: str) -&gt; bool:\n        \"\"\"\n        Authenticate the admin using the password.\n\n        Args:\n            password (str): Password to check.\n\n        Returns:\n            bool: True if authentication is successful, False otherwise.\n        \"\"\"\n        return self._hash_password(password) == self.password_hash\n\n    def view_statistics(self, conference: Conference):\n        \"\"\"\n        Display the number of registered participants.\n\n        Args:\n            conference (Conference): The conference to inspect.\n        \"\"\"\n        print(f\"Conference: {conference.name}\")\n        print(f\"Location: {conference.location}\")\n        print(f\"Date: {conference.date}\")\n        print(f\"Total Participants: {len(conference.participants)}\")\n        ticket_counts = {}\n        for p in conference.participants:\n            ticket_counts[p.ticket_type] = ticket_counts.get(p.ticket_type, 0) + 1\n        print(\"Ticket Breakdown:\")\n        for ticket_type, count in ticket_counts.items():\n            print(f\"  {ticket_type}: {count}\")\n\n    def manage_conference(self, conference: Conference):\n        \"\"\"\n        Perform basic administrative actions on the conference.\n\n        Args:\n            conference (Conference): The conference to manage.\n        \"\"\"\n        while True:\n            print(\"\\nConference Management Menu:\")\n            print(\"1. View Participants\")\n            print(\"2. Remove Participant\")\n            print(\"3. View Statistics\")\n            print(\"4. Exit\")\n\n            choice = input(\"Select an option: \")\n\n            if choice == '1':\n                conference.list_participants()\n            elif choice == '2':\n                email = input(\"Enter email of participant to remove: \")\n                conference.remove_participant(email)\n                print(\"Participant removed if found.\")\n            elif choice == '3':\n                self.view_statistics(conference)\n            elif choice == '4':\n                break\n            else:\n                print(\"Invalid option. Please try again.\")\n</code></pre>"},{"location":"admin/#src.admin.Admin.__init__","title":"<code>__init__(username, password)</code>","text":"<p>Initialize an Admin instance.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>Admin username.</p> required <code>password</code> <code>str</code> <p>Admin password.</p> required Source code in <code>src/admin.py</code> <pre><code>def __init__(self, username: str, password: str):\n    \"\"\"\n    Initialize an Admin instance.\n\n    Args:\n        username (str): Admin username.\n        password (str): Admin password.\n    \"\"\"\n    self.username = username\n    self.password_hash = self._hash_password(password)\n</code></pre>"},{"location":"admin/#src.admin.Admin.authenticate","title":"<code>authenticate(password)</code>","text":"<p>Authenticate the admin using the password.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>Password to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if authentication is successful, False otherwise.</p> Source code in <code>src/admin.py</code> <pre><code>def authenticate(self, password: str) -&gt; bool:\n    \"\"\"\n    Authenticate the admin using the password.\n\n    Args:\n        password (str): Password to check.\n\n    Returns:\n        bool: True if authentication is successful, False otherwise.\n    \"\"\"\n    return self._hash_password(password) == self.password_hash\n</code></pre>"},{"location":"admin/#src.admin.Admin.manage_conference","title":"<code>manage_conference(conference)</code>","text":"<p>Perform basic administrative actions on the conference.</p> <p>Parameters:</p> Name Type Description Default <code>conference</code> <code>Conference</code> <p>The conference to manage.</p> required Source code in <code>src/admin.py</code> <pre><code>def manage_conference(self, conference: Conference):\n    \"\"\"\n    Perform basic administrative actions on the conference.\n\n    Args:\n        conference (Conference): The conference to manage.\n    \"\"\"\n    while True:\n        print(\"\\nConference Management Menu:\")\n        print(\"1. View Participants\")\n        print(\"2. Remove Participant\")\n        print(\"3. View Statistics\")\n        print(\"4. Exit\")\n\n        choice = input(\"Select an option: \")\n\n        if choice == '1':\n            conference.list_participants()\n        elif choice == '2':\n            email = input(\"Enter email of participant to remove: \")\n            conference.remove_participant(email)\n            print(\"Participant removed if found.\")\n        elif choice == '3':\n            self.view_statistics(conference)\n        elif choice == '4':\n            break\n        else:\n            print(\"Invalid option. Please try again.\")\n</code></pre>"},{"location":"admin/#src.admin.Admin.view_statistics","title":"<code>view_statistics(conference)</code>","text":"<p>Display the number of registered participants.</p> <p>Parameters:</p> Name Type Description Default <code>conference</code> <code>Conference</code> <p>The conference to inspect.</p> required Source code in <code>src/admin.py</code> <pre><code>def view_statistics(self, conference: Conference):\n    \"\"\"\n    Display the number of registered participants.\n\n    Args:\n        conference (Conference): The conference to inspect.\n    \"\"\"\n    print(f\"Conference: {conference.name}\")\n    print(f\"Location: {conference.location}\")\n    print(f\"Date: {conference.date}\")\n    print(f\"Total Participants: {len(conference.participants)}\")\n    ticket_counts = {}\n    for p in conference.participants:\n        ticket_counts[p.ticket_type] = ticket_counts.get(p.ticket_type, 0) + 1\n    print(\"Ticket Breakdown:\")\n    for ticket_type, count in ticket_counts.items():\n        print(f\"  {ticket_type}: {count}\")\n</code></pre>"},{"location":"conference/","title":"Conference Module","text":""},{"location":"conference/#src.Conference.Conference","title":"<code>Conference</code>","text":"<p>Represents a conference event and manages its participants.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the conference.</p> <code>location</code> <code>str</code> <p>Location where the conference is held.</p> <code>date</code> <code>str</code> <p>Date of the event (YYYY-MM-DD).</p> <code>participants</code> <code>list</code> <p>List of Participant objects.</p> Source code in <code>src/Conference.py</code> <pre><code>class Conference:\n    \"\"\"\n    Represents a conference event and manages its participants.\n\n    Attributes:\n        name (str): Name of the conference.\n        location (str): Location where the conference is held.\n        date (str): Date of the event (YYYY-MM-DD).\n        participants (list): List of Participant objects.\n    \"\"\"\n\n    def __init__(self, name: str, location: str, date: str):\n        \"\"\"\n        Initialize a Conference instance.\n\n        Args:\n            name (str): Conference name.\n            location (str): Conference location.\n            date (str): Conference date.\n        \"\"\"\n        self.name = name\n        self.location = location\n        self.date = date\n        self.participants = []\n\n    def add_participant(self, participant):\n        \"\"\"\n        Add a participant to the conference.\n\n        Args:\n            participant (Participant): The participant to add.\n        \"\"\"\n        self.participants.append(participant)\n\n    def remove_participant(self, email: str):\n        \"\"\"\n        Remove a participant by email.\n\n        Args:\n            email (str): Email of the participant to remove.\n        \"\"\"\n        self.participants = [p for p in self.participants if p.email != email]\n\n    def list_participants(self):\n        \"\"\"\n        Return a list of participants.\n        \"\"\"\n        for p in self.participants:\n            print(p)\n\n    def find_participant_by_email(self, email: str):\n        \"\"\"\n        Find a participant by email.\n\n        Args:\n            email (str): Email to search for.\n\n        Returns:\n            Participant or None: Found participant or None if not found.\n        \"\"\"\n        return next((p for p in self.participants if p.email == email), None)\n</code></pre>"},{"location":"conference/#src.Conference.Conference.__init__","title":"<code>__init__(name, location, date)</code>","text":"<p>Initialize a Conference instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Conference name.</p> required <code>location</code> <code>str</code> <p>Conference location.</p> required <code>date</code> <code>str</code> <p>Conference date.</p> required Source code in <code>src/Conference.py</code> <pre><code>def __init__(self, name: str, location: str, date: str):\n    \"\"\"\n    Initialize a Conference instance.\n\n    Args:\n        name (str): Conference name.\n        location (str): Conference location.\n        date (str): Conference date.\n    \"\"\"\n    self.name = name\n    self.location = location\n    self.date = date\n    self.participants = []\n</code></pre>"},{"location":"conference/#src.Conference.Conference.add_participant","title":"<code>add_participant(participant)</code>","text":"<p>Add a participant to the conference.</p> <p>Parameters:</p> Name Type Description Default <code>participant</code> <code>Participant</code> <p>The participant to add.</p> required Source code in <code>src/Conference.py</code> <pre><code>def add_participant(self, participant):\n    \"\"\"\n    Add a participant to the conference.\n\n    Args:\n        participant (Participant): The participant to add.\n    \"\"\"\n    self.participants.append(participant)\n</code></pre>"},{"location":"conference/#src.Conference.Conference.find_participant_by_email","title":"<code>find_participant_by_email(email)</code>","text":"<p>Find a participant by email.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>Email to search for.</p> required <p>Returns:</p> Type Description <p>Participant or None: Found participant or None if not found.</p> Source code in <code>src/Conference.py</code> <pre><code>def find_participant_by_email(self, email: str):\n    \"\"\"\n    Find a participant by email.\n\n    Args:\n        email (str): Email to search for.\n\n    Returns:\n        Participant or None: Found participant or None if not found.\n    \"\"\"\n    return next((p for p in self.participants if p.email == email), None)\n</code></pre>"},{"location":"conference/#src.Conference.Conference.list_participants","title":"<code>list_participants()</code>","text":"<p>Return a list of participants.</p> Source code in <code>src/Conference.py</code> <pre><code>def list_participants(self):\n    \"\"\"\n    Return a list of participants.\n    \"\"\"\n    for p in self.participants:\n        print(p)\n</code></pre>"},{"location":"conference/#src.Conference.Conference.remove_participant","title":"<code>remove_participant(email)</code>","text":"<p>Remove a participant by email.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>Email of the participant to remove.</p> required Source code in <code>src/Conference.py</code> <pre><code>def remove_participant(self, email: str):\n    \"\"\"\n    Remove a participant by email.\n\n    Args:\n        email (str): Email of the participant to remove.\n    \"\"\"\n    self.participants = [p for p in self.participants if p.email != email]\n</code></pre>"},{"location":"participant/","title":"Participant Module","text":""},{"location":"participant/#src.Participant_Class_code.Participant","title":"<code>Participant</code>","text":"<p>Represents a participant of a conference.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The participant's full name.</p> <code>email</code> <code>str</code> <p>The participant's email address.</p> <code>ticket_type</code> <code>str</code> <p>Type of ticket the participant holds.</p> Source code in <code>src/Participant_Class_code.py</code> <pre><code>class Participant:\n    \"\"\"\n    Represents a participant of a conference.\n\n    Attributes:\n        name (str): The participant's full name.\n        email (str): The participant's email address.\n        ticket_type (str): Type of ticket the participant holds.\n    \"\"\"\n\n    def __init__(self, name: str, email: str, ticket_type: str):\n        \"\"\"\n        Initialize a Participant instance.\n\n        Args:\n            name (str): Participant's name.\n            email (str): Participant's email.\n            ticket_type (str): Type of ticket.\n        \"\"\"\n        self.name = name\n        self.email = email\n        self.ticket_type = ticket_type\n        self.registration_date = datetime.now()\n\n    def to_dict(self) -&gt; dict:\n        \"\"\"\n        Return a dictionary representation of the Participant.\n        \"\"\"\n        return {\n            \"name\": self.name,\n            \"email\": self.email,\n            \"ticket_type\": self.ticket_type,\n            \"registration_date\": self.registration_date.strftime(\"%Y-%m-%d %H:%M:%S\")\n        }\n\n    def __str__(self):\n        return f\"{self.name} ({self.email}) - {self.ticket_type}\"\n</code></pre>"},{"location":"participant/#src.Participant_Class_code.Participant.__init__","title":"<code>__init__(name, email, ticket_type)</code>","text":"<p>Initialize a Participant instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Participant's name.</p> required <code>email</code> <code>str</code> <p>Participant's email.</p> required <code>ticket_type</code> <code>str</code> <p>Type of ticket.</p> required Source code in <code>src/Participant_Class_code.py</code> <pre><code>def __init__(self, name: str, email: str, ticket_type: str):\n    \"\"\"\n    Initialize a Participant instance.\n\n    Args:\n        name (str): Participant's name.\n        email (str): Participant's email.\n        ticket_type (str): Type of ticket.\n    \"\"\"\n    self.name = name\n    self.email = email\n    self.ticket_type = ticket_type\n    self.registration_date = datetime.now()\n</code></pre>"},{"location":"participant/#src.Participant_Class_code.Participant.to_dict","title":"<code>to_dict()</code>","text":"<p>Return a dictionary representation of the Participant.</p> Source code in <code>src/Participant_Class_code.py</code> <pre><code>def to_dict(self) -&gt; dict:\n    \"\"\"\n    Return a dictionary representation of the Participant.\n    \"\"\"\n    return {\n        \"name\": self.name,\n        \"email\": self.email,\n        \"ticket_type\": self.ticket_type,\n        \"registration_date\": self.registration_date.strftime(\"%Y-%m-%d %H:%M:%S\")\n    }\n</code></pre>"},{"location":"registration_system/","title":"Registration System Module","text":""},{"location":"registration_system/#src.RegistrationSystem_class.RegistrationSystem","title":"<code>RegistrationSystem</code>","text":"<p>Manages the registration and data persistence of participants.</p> <p>Attributes:</p> Name Type Description <code>participants</code> <code>list</code> <p>List of registered participants.</p> Source code in <code>src/RegistrationSystem_class.py</code> <pre><code>class RegistrationSystem:\n    \"\"\"\n    Manages the registration and data persistence of participants.\n\n    Attributes:\n        participants (list): List of registered participants.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the registration system with an empty list of participants.\n        \"\"\"\n        self.participants = []\n\n    def register_participant(self, name: str, email: str, ticket_type: str):\n        \"\"\"\n        Registers a new participant.\n\n        Args:\n            name (str): Name of the participant.\n            email (str): Email of the participant.\n            ticket_type (str): Ticket type selected.\n\n        Returns:\n            Participant: The registered participant object.\n        \"\"\"\n        participant = Participant(name, email, ticket_type)\n        self.participants.append(participant)\n        return participant\n\n    def cancel_registration(self, email: str):\n        \"\"\"\n        Cancels a registration by email.\n\n        Args:\n            email (str): The email of the participant to cancel.\n        \"\"\"\n        self.participants = [p for p in self.participants if p.email != email]\n\n    def export_to_csv(self, filename: str):\n        \"\"\"\n        Exports participant data to a CSV file.\n\n        Args:\n            filename (str): Path to the output CSV file.\n        \"\"\"\n        with open(filename, mode='w', newline='', encoding='utf-8') as file:\n            writer = csv.DictWriter(file, fieldnames=[\"name\", \"email\", \"ticket_type\", \"registration_date\"])\n            writer.writeheader()\n            for p in self.participants:\n                writer.writerow(p.to_dict())\n\n    def import_from_csv(self, filename: str):\n        \"\"\"\n        Imports participant data from a CSV file.\n\n        Args:\n            filename (str): Path to the input CSV file.\n        \"\"\"\n        with open(filename, mode='r', newline='', encoding='utf-8') as file:\n            reader = csv.DictReader(file)\n            for row in reader:\n                participant = Participant(row[\"name\"], row[\"email\"], row[\"ticket_type\"])\n                self.participants.append(participant)\n</code></pre>"},{"location":"registration_system/#src.RegistrationSystem_class.RegistrationSystem.__init__","title":"<code>__init__()</code>","text":"<p>Initializes the registration system with an empty list of participants.</p> Source code in <code>src/RegistrationSystem_class.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initializes the registration system with an empty list of participants.\n    \"\"\"\n    self.participants = []\n</code></pre>"},{"location":"registration_system/#src.RegistrationSystem_class.RegistrationSystem.cancel_registration","title":"<code>cancel_registration(email)</code>","text":"<p>Cancels a registration by email.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>The email of the participant to cancel.</p> required Source code in <code>src/RegistrationSystem_class.py</code> <pre><code>def cancel_registration(self, email: str):\n    \"\"\"\n    Cancels a registration by email.\n\n    Args:\n        email (str): The email of the participant to cancel.\n    \"\"\"\n    self.participants = [p for p in self.participants if p.email != email]\n</code></pre>"},{"location":"registration_system/#src.RegistrationSystem_class.RegistrationSystem.export_to_csv","title":"<code>export_to_csv(filename)</code>","text":"<p>Exports participant data to a CSV file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Path to the output CSV file.</p> required Source code in <code>src/RegistrationSystem_class.py</code> <pre><code>def export_to_csv(self, filename: str):\n    \"\"\"\n    Exports participant data to a CSV file.\n\n    Args:\n        filename (str): Path to the output CSV file.\n    \"\"\"\n    with open(filename, mode='w', newline='', encoding='utf-8') as file:\n        writer = csv.DictWriter(file, fieldnames=[\"name\", \"email\", \"ticket_type\", \"registration_date\"])\n        writer.writeheader()\n        for p in self.participants:\n            writer.writerow(p.to_dict())\n</code></pre>"},{"location":"registration_system/#src.RegistrationSystem_class.RegistrationSystem.import_from_csv","title":"<code>import_from_csv(filename)</code>","text":"<p>Imports participant data from a CSV file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Path to the input CSV file.</p> required Source code in <code>src/RegistrationSystem_class.py</code> <pre><code>def import_from_csv(self, filename: str):\n    \"\"\"\n    Imports participant data from a CSV file.\n\n    Args:\n        filename (str): Path to the input CSV file.\n    \"\"\"\n    with open(filename, mode='r', newline='', encoding='utf-8') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            participant = Participant(row[\"name\"], row[\"email\"], row[\"ticket_type\"])\n            self.participants.append(participant)\n</code></pre>"},{"location":"registration_system/#src.RegistrationSystem_class.RegistrationSystem.register_participant","title":"<code>register_participant(name, email, ticket_type)</code>","text":"<p>Registers a new participant.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the participant.</p> required <code>email</code> <code>str</code> <p>Email of the participant.</p> required <code>ticket_type</code> <code>str</code> <p>Ticket type selected.</p> required <p>Returns:</p> Name Type Description <code>Participant</code> <p>The registered participant object.</p> Source code in <code>src/RegistrationSystem_class.py</code> <pre><code>def register_participant(self, name: str, email: str, ticket_type: str):\n    \"\"\"\n    Registers a new participant.\n\n    Args:\n        name (str): Name of the participant.\n        email (str): Email of the participant.\n        ticket_type (str): Ticket type selected.\n\n    Returns:\n        Participant: The registered participant object.\n    \"\"\"\n    participant = Participant(name, email, ticket_type)\n    self.participants.append(participant)\n    return participant\n</code></pre>"},{"location":"ticket/","title":"Ticket Module","text":""},{"location":"ticket/#src.ticket.Ticket","title":"<code>Ticket</code>","text":"<p>Represents a conference ticket.</p> <p>Attributes:</p> Name Type Description <code>ticket_type</code> <code>str</code> <p>Type of the ticket (e.g., 'Standard', 'VIP').</p> <code>price</code> <code>float</code> <p>Price of the ticket.</p> Source code in <code>src/ticket.py</code> <pre><code>class Ticket:\n    \"\"\"\n    Represents a conference ticket.\n\n    Attributes:\n        ticket_type (str): Type of the ticket (e.g., 'Standard', 'VIP').\n        price (float): Price of the ticket.\n    \"\"\"\n\n    def __init__(self, ticket_type: str, price: float, access_level: str):\n        \"\"\"\n        Initializes a Ticket instance.\n\n        Args:\n            ticket_type (str): Type of the ticket.\n            price (float): Price of the ticket.\n        \"\"\"\n        self.ticket_type = ticket_type\n        self.price = price\n        self.access_level = access_level\n\n    def get_price(self) -&gt; float:\n        \"\"\"\n        Return the price of the ticket.\n        \"\"\"\n        return self.price\n\n    def __str__(self):\n        return f\"{self.ticket_type} - ${self.price} ({self.access_level})\"\n</code></pre>"},{"location":"ticket/#src.ticket.Ticket.__init__","title":"<code>__init__(ticket_type, price, access_level)</code>","text":"<p>Initializes a Ticket instance.</p> <p>Parameters:</p> Name Type Description Default <code>ticket_type</code> <code>str</code> <p>Type of the ticket.</p> required <code>price</code> <code>float</code> <p>Price of the ticket.</p> required Source code in <code>src/ticket.py</code> <pre><code>def __init__(self, ticket_type: str, price: float, access_level: str):\n    \"\"\"\n    Initializes a Ticket instance.\n\n    Args:\n        ticket_type (str): Type of the ticket.\n        price (float): Price of the ticket.\n    \"\"\"\n    self.ticket_type = ticket_type\n    self.price = price\n    self.access_level = access_level\n</code></pre>"},{"location":"ticket/#src.ticket.Ticket.get_price","title":"<code>get_price()</code>","text":"<p>Return the price of the ticket.</p> Source code in <code>src/ticket.py</code> <pre><code>def get_price(self) -&gt; float:\n    \"\"\"\n    Return the price of the ticket.\n    \"\"\"\n    return self.price\n</code></pre>"}]}